// <auto-generated />
using System;
using DDWork.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DDWork.Migrations
{
    [DbContext(typeof(Model))]
    [Migration("20200423015903_init6")]
    partial class init6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DDWork.Models.Car", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("bank_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("bank_no")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("car_load")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("car_no")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("car");
                });

            modelBuilder.Entity("DDWork.Models.Contract", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("contract_price")
                        .HasColumnType("double");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("customerid")
                        .HasColumnType("int");

                    b.Property<string>("delivery_date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("fine")
                        .HasColumnType("double");

                    b.Property<int?>("materialid")
                        .HasColumnType("int");

                    b.Property<double>("print_price")
                        .HasColumnType("double");

                    b.Property<double>("print_weight")
                        .HasColumnType("double");

                    b.Property<double>("weight")
                        .HasColumnType("double");

                    b.HasKey("id");

                    b.HasIndex("customerid");

                    b.HasIndex("materialid");

                    b.ToTable("contract");
                });

            modelBuilder.Entity("DDWork.Models.Customer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("contact")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("DDWork.Models.ExpenditrueViewModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("car_no")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("carriage_count_price")
                        .HasColumnType("double");

                    b.Property<string>("date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("material_count_price")
                        .HasColumnType("double");

                    b.Property<string>("sharehloder_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("ExpenditrueViewModel");
                });

            modelBuilder.Entity("DDWork.Models.Expenditure", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("carriage_count_price")
                        .HasColumnType("double");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("material_count_price")
                        .HasColumnType("double");

                    b.Property<int?>("shareholderid")
                        .HasColumnType("int");

                    b.Property<int?>("transportationid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("shareholderid");

                    b.HasIndex("transportationid");

                    b.ToTable("expenditure");
                });

            modelBuilder.Entity("DDWork.Models.GainLossViewModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("gain_or_loss")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("item")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.HasKey("id");

                    b.ToTable("GainLossViewModel");
                });

            modelBuilder.Entity("DDWork.Models.Income", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("count_price")
                        .HasColumnType("double");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("customerid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("customerid");

                    b.ToTable("income");
                });

            modelBuilder.Entity("DDWork.Models.Material", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("unit")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("material");
                });

            modelBuilder.Entity("DDWork.Models.MaterialUnitPrice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("materialid")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.HasKey("id");

                    b.HasIndex("materialid");

                    b.ToTable("material_unit_price");
                });

            modelBuilder.Entity("DDWork.Models.Shareholder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("shareholder");
                });

            modelBuilder.Entity("DDWork.Models.ShareholderViewModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("average_count_price")
                        .HasColumnType("double");

                    b.Property<double>("difference_count_price")
                        .HasColumnType("double");

                    b.Property<double>("out_count_price")
                        .HasColumnType("double");

                    b.Property<string>("shareholder_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("ShareholderViewModel");
                });

            modelBuilder.Entity("DDWork.Models.Supply", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("contact")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("supply");
                });

            modelBuilder.Entity("DDWork.Models.Transportation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("carid")
                        .HasColumnType("int");

                    b.Property<double>("carriage_count_price")
                        .HasColumnType("double");

                    b.Property<double>("carriage_should_count_price")
                        .HasColumnType("double");

                    b.Property<double>("carriage_unit_price")
                        .HasColumnType("double");

                    b.Property<double>("carriage_weight")
                        .HasColumnType("double");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("customerid")
                        .HasColumnType("int");

                    b.Property<string>("end_date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("material_count_price")
                        .HasColumnType("double");

                    b.Property<double>("material_unit_price")
                        .HasColumnType("double");

                    b.Property<double>("material_weight")
                        .HasColumnType("double");

                    b.Property<int?>("materialid")
                        .HasColumnType("int");

                    b.Property<double>("service_charge")
                        .HasColumnType("double");

                    b.Property<int?>("shareholderid")
                        .HasColumnType("int");

                    b.Property<string>("start_date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("supplyid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("carid");

                    b.HasIndex("customerid");

                    b.HasIndex("materialid");

                    b.HasIndex("shareholderid");

                    b.HasIndex("supplyid");

                    b.ToTable("transportation");
                });

            modelBuilder.Entity("DDWork.Models.TransportationViewModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("car_no")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("carriage_count_price")
                        .HasColumnType("double");

                    b.Property<double>("carriage_unit_price")
                        .HasColumnType("double");

                    b.Property<double>("carriage_weight")
                        .HasColumnType("double");

                    b.Property<string>("customer_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("end_date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("material_count_price")
                        .HasColumnType("double");

                    b.Property<string>("material_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("material_unit_price")
                        .HasColumnType("double");

                    b.Property<double>("material_weight")
                        .HasColumnType("double");

                    b.Property<string>("shareholder_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("start_date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("supply_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("TransportationViewModel");
                });

            modelBuilder.Entity("DDWork.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("create_time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ding_id")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("privileges")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("DDWork.Models.Contract", b =>
                {
                    b.HasOne("DDWork.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerid");

                    b.HasOne("DDWork.Models.Material", "material")
                        .WithMany()
                        .HasForeignKey("materialid");
                });

            modelBuilder.Entity("DDWork.Models.Expenditure", b =>
                {
                    b.HasOne("DDWork.Models.Shareholder", "shareholder")
                        .WithMany()
                        .HasForeignKey("shareholderid");

                    b.HasOne("DDWork.Models.Transportation", "transportation")
                        .WithMany()
                        .HasForeignKey("transportationid");
                });

            modelBuilder.Entity("DDWork.Models.Income", b =>
                {
                    b.HasOne("DDWork.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerid");
                });

            modelBuilder.Entity("DDWork.Models.MaterialUnitPrice", b =>
                {
                    b.HasOne("DDWork.Models.Material", "material")
                        .WithMany()
                        .HasForeignKey("materialid");
                });

            modelBuilder.Entity("DDWork.Models.Transportation", b =>
                {
                    b.HasOne("DDWork.Models.Car", "car")
                        .WithMany()
                        .HasForeignKey("carid");

                    b.HasOne("DDWork.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerid");

                    b.HasOne("DDWork.Models.Material", "material")
                        .WithMany()
                        .HasForeignKey("materialid");

                    b.HasOne("DDWork.Models.Shareholder", "shareholder")
                        .WithMany()
                        .HasForeignKey("shareholderid");

                    b.HasOne("DDWork.Models.Supply", "supply")
                        .WithMany()
                        .HasForeignKey("supplyid");
                });
#pragma warning restore 612, 618
        }
    }
}
